---
description: Documentation standards for code comments, automated guidance, and system references
globs:
alwaysApply: false
---

# Documentation Patterns

Documentation standards aligned with architecture rules in `coding_patterns.mdc` and naming rules in `naming_conventions.mdc`.

## Core Principles

1. **Clear and Concise** – Keep wording direct and actionable
2. **Complete Coverage** – Document public APIs, complex logic, and implicit behavior
3. **Consistent Format** – Use the templates below for classes, methods, interfaces, and enums
4. **Current** – Update docs alongside code changes
5. **Audience-Focused** – Tailor comments to future maintainers and automated agents
6. **Examples** – Provide runnable examples when useful
7. **Searchable** – Use clear terms and keywords to help agents navigate

## Automated Agent Guidance

### Inline Keywords for Agents
Use these prefixes in comments to help automated agents parse intent:
- `AGENT-TODO:` short description of remaining work or follow-up
- `AGENT-NOTE:` important context the agent must retain
- `AGENT-DECISION:` explanation of architectural or business decisions
- `AGENT-REFERENCE:` pointer to other files or documentation

Example:
```typescript
// AGENT-DECISION: Maintaining optimistic cache to keep UI responsive
// AGENT-REFERENCE: See service_optmistic_reference.md for undo logic
```

### Structured Comment Blocks
When documenting complex logic, start with a one-line summary followed by structured bullet points:
```typescript
// SUMMARY: Sync local state with persisted Supabase data
// INPUTS: userId (string), payload (UserUpdate)
// SIDE-EFFECTS: triggers audit log via AuditService
// FAILURE-MODES: throws ValidationError, ApiError
```
Automated tools can pair these keywords with code to build documentation.

## Advanced System Documentation

### Root-Level Context Files
For complex subsystems, create Markdown references next to the entry point directory:
- `readme.md` – Overview of the subsystem (responsibilities, diagrams, key workflows)
- `integration-notes.md` – External dependencies, environment variables, API contracts
- `troubleshooting.md` – Known issues, operational runbooks
- Link these files from relevant rule documents using `AGENT-REFERENCE` comments

### Directory Naming Conventions
- Place documentation files at `src/app/<domain>/docs/` for domain-level context
- Use `docs/overview.md`, `docs/data-flow.md`, `docs/api-contracts.md` as needed
- Reference them in code with `AGENT-REFERENCE` comments for quick lookup

### Change Logs for Critical Modules
- Maintain `CHANGELOG.md` in root of critical domains (e.g., `src/app/domain/payments/CHANGELOG.md`)
- Include summary entries with dates, author, and reason for change
- Agents should append new entries when refactoring significant behavior

## Code Documentation Standards

### JSDoc Templates
```typescript
/**
 * Brief summary describing the responsibility
 *
 * @param searchTerm Optional search term to filter establishments by name
 * @returns Promise resolving to establishment previews
 * @throws {ApiError} When the request fails
 * @example
 * ```typescript
 * const establishments = await establishmentApi.getList('restaurant');
 * console.log(establishments);
 * ```
 */
async getList(searchTerm?: string): Promise<iEstablishmentPreview[]> {
  // Implementation
}
```

### Class Documentation
```typescript
/**
 * EstablishmentService handles establishment CRUD operations.
 *
 * RESPONSIBILITIES:
 * - Load establishment collections and details
 * - Coordinate optimistic updates and notifications
 * - Expose Signals consumed by smart components
 *
 * @example
 * const service = inject(EstablishmentService);
 * await service.load();
 * const list = service.establishments();
 */
@Injectable({ providedIn: 'root' })
export class EstablishmentService {
  // Implementation
}
```

### Interface Documentation
```typescript
/**
 * Dynamic form configuration used by <v-dynamic-form>.
 *
 * @interface DynamicFormConfig
 * @property fields Definition for each form field
 * @property validation Form-level rules
 * @property display Layout hints for the renderer
 */
export interface DynamicFormConfig {
  fields: DynamicFieldConfig[];
  validation: FormValidationRules;
  display: FormDisplayOptions;
}
```

### Enum Documentation
```typescript
/**
 * Supported dynamic field types rendered by <v-dynamic-form>.
 */
export enum DynamicFieldType {
  TEXT = 'text',
  TEXTAREA = 'textarea',
  EMAIL = 'email',
  PASSWORD = 'password',
  NUMBER = 'number',
  DATE = 'date',
  SELECT = 'select',
  CHECKBOX = 'checkbox',
  RADIO = 'radio'
}
```

## API Documentation Standards

Document API methods with parameters, error cases, and examples. Example snippet:
```typescript
/**
 * Retrieves paginated establishments.
 *
 * @param page Page number (1-based)
 * @param pageSize Items per page
 * @param searchTerm Optional filter by name
 * @returns Paginated data with metadata
 * @throws {ValidationError} When parameters are invalid
 * @throws {ApiError} When the request fails
 */
async getListPaginated(
  page: number = 1,
  pageSize: number = 10,
  searchTerm?: string
): Promise<iPaginatedResponse<iEstablishmentPreview>> {
  // Implementation
}
```

## Component and Service Documentation

Provide class-level summaries and document Inputs/Outputs with inline `@input`/`@output` comments. For services, document business rules and Signal exposure.

## Documentation Best Practices

### Do
- Use structured comments to guide humans and agents
- Reference external docs via `AGENT-REFERENCE`
- Keep examples executable where possible
- Update documentation during code reviews

### Don’t
- Write redundant comments for obvious code
- Leave outdated references or broken links
- Mix languages inside documentation

## Automation Hooks

### JSDoc Tooling
Keep JSDoc configuration up to date to auto-generate HTML references:
```json
{
  "source": {
    "include": ["./src/"],
    "includePattern": "\\.(js|ts)$",
    "excludePattern": "(node_modules/|dist/|coverage/)"
  },
  "opts": {
    "destination": "./docs/",
    "recurse": true
  },
  "plugins": ["plugins/markdown"],
  "templates": {
    "cleverLinks": false,
    "monospaceLinks": false
  }
}
```

### Automated Workflows
- `npm run docs:generate` – Build documentation artifacts
- `npm run docs:validate` – Validate doc consistency
- Integrate these commands into CI pipelines for critical modules

## Maintenance Checklist
- [ ] Public APIs documented
- [ ] Examples compile
- [ ] Parameters and return types specified
- [ ] Error conditions documented
- [ ] Links verified
- [ ] Inline `AGENT-*` notes still relevant