---
description: Centralized error handling - all patterns in one place
alwaysApply: false
---

# Error Handling Patterns

**Quick Jump**: [Types](#types) | [API](#api-errors) | [Service](#service-errors) | [Component](#component-errors)

## Error Types {#types}

```typescript
// @shared/utils/errors.ts
export class ApiError extends Error {
  constructor(message: string, public code?: string) { 
    super(message); 
  }
}

export class ValidationError extends ApiError {
  constructor(public errors: string[]) { 
    super(errors.join(', '), 'VALIDATION'); 
  }
}

export class NotFoundError extends ApiError {
  constructor(resource: string) { 
    super(`${resource} not found`, 'NOT_FOUND'); 
  }
}
```

## API Layer {#api-errors}

```typescript
// Transform Supabase errors to domain errors
async getItem(id: string): Promise<Item | null> {
  const { data, error } = await this.supabase
    .from('items')
    .select()
    .eq('id', id)
    .single();
    
  if (error) {
    if (error.code === 'PGRST116') return null; // Not found
    throw new ApiError(error.message, error.code);
  }
  return data;
}
```

## Service Layer {#service-errors}

```typescript
// Validate, catch, log, re-throw
async create(data: CreateDto): Promise<Item> {
  // Validation
  const validation = this.validate(data);
  if (!validation.isValid) {
    throw new ValidationError(validation.errors);
  }
  
  try {
    const item = await this.api.create(data);
    this.listResource.reload();
    return item;
  } catch (error) {
    // Log for debugging, re-throw for component
    console.error('[Service]', error);
    throw error;
  }
}

// Typed error signal
readonly error = computed<ApiError | null>(
  () => this.resource.error() ?? null
);
```

## Component Layer {#component-errors}

```typescript
// Display user-friendly messages
@if (error()) {
  <div class="error" [ngSwitch]="error()?.code">
    <p *ngSwitchCase="'VALIDATION'">Please check your input</p>
    <p *ngSwitchCase="'NOT_FOUND'">Item not found</p>
    <p *ngSwitchDefault>Something went wrong</p>
  </div>
}
```

## Testing Errors {#test-errors}

```typescript
it('should handle API errors', async () => {
  const error = new ApiError('Failed', 'API_ERROR');
  mockApi.getItems.and.returnValue(Promise.reject(error));
  
  await service.loadItems();
  
  expect(service.error()).toEqual(error);
});
```

## Error Recovery {#recovery}

```typescript
// Retry with exponential backoff
async retryOperation<T>(
  operation: () => Promise<T>,
  maxRetries = 3
): Promise<T> {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await operation();
    } catch (error) {
      if (i === maxRetries - 1) throw error;
      await new Promise(r => setTimeout(r, 2 ** i * 1000));
    }
  }
  throw new Error('Max retries exceeded');
}
```