---
description: Directory layout, module organization, and file placement guidelines
globs:
alwaysApply: false
---

# Directory Architecture and Imports

This document explains how the project is physically structured and how modules communicate. The layout follows the separation-of-concerns rules defined in `A-coding_patterns.mdc`.

### Directory Architecture and Organization

The project uses a modular structure to keep concerns separated and scalable.

  * **`/core` – Core System**: Application-wide logic that loads once.
    ```
    core/
    ├── guards/      # Authentication and authorization guards
    ├── pages/       # System-level pages (e.g., 404 Not Found)
    └── layout/      # Main application layouts (shells with navbars)
    ```
  * **`/shared` – Shared Resources**: Reusable code that is business-agnostic.
    ```
    shared/
    ├── components/  # Shared, business-aware components
    ├── constants/   # Global constants
    └── services/    # Global services (e.g., notification service)
    ```
  * **`/widget` – UI Widgets**: Generic, presentation-only components.
    ```
    widget/
    ├── components/  # Reusable UI components (e.g., v-button, v-card)
    ├── directives/  # Custom attribute or structural directives
    └── pipes/       # Custom data transformation pipes
    ```
  * **`/domain` – Business Modules**: One folder per business domain.
    ```
    domain/
    ├── auth/
    └── establishment/
        ├── apis/
        ├── components/
        ├── services/
        ├── interfaces/
        ├── pages/
        └── ...
    ```

#### Organization Rule

> Domain-specific files (`constants`, `dialogs`, etc.) **must** be placed inside their respective domain folder. If a resource needs to be used by more than one domain, it should be moved to the `/shared` folder. If it is a purely presentational UI component, it belongs in `/widget`.
