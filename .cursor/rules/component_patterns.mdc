---
description: Complete guide to create components his patterns, smart vs dumb components, and component architecture
globs:
alwaysApply: false
---

components follow a strict separation between "smart" and "dumb" components to maintain clear responsibilities and improve testability.

This document is the entry point for component rules. Detailed guidance is divided into focused references to keep this file concise and easier to scan.

## Primary Guides
- **Component Types** – Smart page components vs. dumb reusable components, including full rules and examples. See `components/component_types_reference.mdc`.
- **Component Structure** – Template/class organization, extraction rules, and decorator conventions. See `components/component_structure_reference.mdc`.
- **Dynamic Component Creation** – Patterns for Angular 20 dynamic hosting and factories. See `components/component_dynamic_creation_reference.mdc`.
- **Component Communication** – Input/output/model patterns for parent-child collaboration. See `components/component_communication_reference.mdc`.
- **Component Testing** – Expectations for smart vs. dumb component test coverage. See `components/component_testing_reference.mdc`.

## Quick Rules
- Separate smart page components from dumb reusable components and keep logic flowing `Component → Service → API`.
- Inject services in page components only; reusable components must remain presentation-only.
- Connect service signals directly to templates and forward child outputs back to services.
- Inline `template` or `styles` blocks must stay at or below five lines; move longer content to dedicated `.html`/`.scss` files referenced via `templateUrl`/`styleUrls`.
- Use Angular 20 control-flow blocks (`@if`, `@for`, `@switch`) and signals for state.
- Coordinate naming with `components/component_naming_reference.md` and the broader naming rules.

## Reference Library
- `components/component_types_reference.mdc`
- `components/component_structure_reference.mdc`
- `components/component_dynamic_creation_reference.mdc`
- `components/component_communication_reference.mdc`
- `components/component_testing_reference.mdc`
- `components/component_naming_reference.md`

### Related Service Guidance
- **Error Handling**: `service_error_reference.md`
- **Testing Examples**: `service_test_reference.md`
- **Optimistic Patterns**: `service_optmistic_reference.md`
- **Cache Patterns**: `service_cache_reference.md`
