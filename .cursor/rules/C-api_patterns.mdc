---
description: API layer contract for Supabase access and error propagation
alwaysApply: false
---

The API layer is responsible for all communication with Supabase. Review `A-coding_patterns.mdc` for security and quality principles that also apply here.

## API Layer Rules

1. This is the **only** layer that communicates with the backend
2. Inject the `SupabaseClient` directly
3. Build all queries here, using Supabase's `select()` syntax for joins
4. Methods must return a `Promise`
5. Handle errors consistently and throw meaningful exceptions
6. Use TypeScript interfaces for request/response types
7. Implement proper error handling and logging (see `error_handling_patterns.mdc`)

## Example API

```typescript
// establishment.api.ts
@Injectable({ providedIn: 'root' })
export class EstablishmentApi {
  private supabase = inject(SupabaseClient);
  
  async getList(searchTerm?: string): Promise<iEstablishmentPreview[]> {
    let query = this.supabase
      .from('establishments')
      .select('id, name, description, created_at')
      .order('created_at', { ascending: false });
    
    if (searchTerm) {
      query = query.ilike('name', `%${searchTerm}%`);
    }
    
    const { data, error } = await query;
    if (error) throw error;
    return data || [];
  }
  
  async getDetailsById(id: string): Promise<iEstablishmentDetails | null> {
    const { data, error } = await this.supabase
      .from('establishments')
      .select(`
        *,
        address:addresses (*),
        reviews:reviews (
          *,
          user:users (name, avatar_url)
        ),
        owner:users (id, name, email)
      `)
      .eq('id', id)
      .single();
    
    if (error) {
      if (error.code === 'PGRST116') return null; // Not found
      throw error;
    }
    return data;
  }
  
  async create(establishment: iEstablishmentCreate): Promise<iEstablishment> {
    const { data, error } = await this.supabase
      .from('establishments')
      .insert(establishment)
      .select()
      .single();
    
    if (error) throw error;
    return data;
  }
  
  async update(id: string, establishment: iEstablishmentUpdate): Promise<iEstablishment> {
    const { data, error } = await this.supabase
      .from('establishments')
      .update(establishment)
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data;
  }
  
  async delete(id: string): Promise<void> {
    const { error } = await this.supabase
      .from('establishments')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
  }
}
```
### Related References
- `A-coding_patterns.mdc` – Architecture and security guidelines
- `error_handling_patterns.mdc#API Layer Error Handling` – Error handling specifics
- `apis/api_testing_reference.md` – Testing examples, helpers, and advanced patterns
