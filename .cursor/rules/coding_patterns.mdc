---
description: Coding patterns, naming conventions, and component architecture standards
globs:
alwaysApply: true
---

# General Coding Patterns

This file contains general coding patterns and architectural guidelines that apply across all layers of the application.

## Code Organization Principles

### Separation of Concerns
- **Presentation Layer**: Components handle UI and user interactions
- **State Layer**: Services manage application state and business logic  
- **Data Layer**: APIs handle backend communication

### Dependency Flow
```
Components → Services → APIs → Supabase
```

### Signal-Based Architecture
- Use Angular Signals for all state management
- Avoid manual subscription management
- Leverage `computed()` for derived state
- Use `resource()` for async data loading

## Code Quality Standards

### TypeScript Usage
- Use strict type checking
- Prefer interfaces over types for object shapes
- Use utility types (`Pick`, `Omit`, `Partial`) for type variations
- Avoid `any` type usage

### Performance Considerations
- Use `OnPush` change detection strategy
- Implement lazy loading for modules
- Use `trackBy` functions in `@for` loops
- Optimize bundle size with tree shaking

### Security Best Practices
- Validate all user inputs
- Sanitize data before rendering
- Use proper authentication guards
- Implement proper authorization checks