---
description: Notification service patterns and usage guidelines
globs:
alwaysApply: false
---

# Notification Patterns

Use the NotificationService as an extension of the flows described in `coding_patterns.mdc`, `service_patterns.mdc`, and `error_handling_patterns.mdc`.

## Notification Service Rules

**Rule 1: Always inject NotificationService in services, never in components**
**Rule 2: Use success/error helpers for user feedback after async operations**
**Rule 3: Keep notifications concise—message only, avoid complex titles**

### References
- `service_patterns.mdc` – State orchestration and actions
- `error_handling_patterns.mdc` – Error handling before user feedback

## Usage Patterns

### In Services (Recommended)

```typescript
@Injectable({ providedIn: 'root' })
export class UserService {
  private notificationService = inject(NotificationService);

  async createUser(user: UserCreate): Promise<User> {
    try {
      const newUser = await this.api.createUser(user);
      this.notificationService.success('User created successfully');
      return newUser;
    } catch (error) {
      this.errorHandler.handleError(error, 'Creating user');
      throw error;
    }
  }

  async deleteUser(id: string): Promise<void> {
    try {
      await this.api.deleteUser(id);
      this.notificationService.success('User deleted successfully');
    } catch (error) {
      this.errorHandler.handleError(error, 'Deleting user');
      throw error;
    }
  }
}
```

### In Components (When needed)

```typescript
@Component({...})
export class UserComponent {
  private notificationService = inject(NotificationService);

  onSave(): void {
    this.notificationService.success('Changes saved');
  }

  onError(): void {
    this.notificationService.error('Something went wrong');
  }
}
```

## Notification Types

```typescript
// Success notifications
this.notificationService.success('Operation completed successfully');

// Error notifications  
this.notificationService.error('Failed to save changes');

// Custom notifications
this.notificationService.addNotification({
  id: 'custom-id',
  message: 'Custom message',
  type: 'info',
  timestamp: new Date()
});
```

## Best Practices

- ✅ Use in services for API operation feedback
- ✅ Keep messages concise and user-friendly
- ✅ Use success for completed operations
- ✅ Use error for failed operations
- ❌ Don't use in components unless absolutely necessary
- ❌ Don't create complex notification objects manually
- ❌ Don't forget to handle errors before showing notifications