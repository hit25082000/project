---
description: Component patterns for smart vs. dumb roles and Angular 20 syntax
globs:
alwaysApply: false
---

Components follow a strict separation between smart page components and dumb reusable components. Review `A-coding_patterns.mdc` for shared rules.

## Primary Guides
- `components/component_types_reference.mdc` – Component types, responsibilities, and examples
- `components/component_structure_reference.md` – Template/class organization and extraction rules
- `components/component_dynamic_creation_reference.md` – Dynamic component patterns in Angular 20
- `components/component_communication_reference.md` – Parent/child interaction patterns
- `components/component_testing_reference.md` – Test coverage expectations by component type

## Quick Rules
- Keep the flow `Component → Service → API`
- Inject services only in page components; reusable components remain presentation-only
- Bind service Signals directly to templates and propagate outputs back to the service
- Limit inline `template`/`styles` to five lines; extract longer content into dedicated files
- Use declarative control flow (`@if`, `@for`, `@switch`) and Signals for state
- Align names with `components/component_naming_reference.md` and `naming_conventions.mdc`

## Related References
- `A-coding_patterns.mdc` – Global architecture and Signal rules
- `services/service_error_reference.md` – Shared error handling guidance
- `services/service_test_reference.md` – End-to-end testing examples with services
- `services/service_optmistic_reference.md` – Optimistic update strategies
- `services/service_cache_reference.md` – Cache and invalidation patterns
