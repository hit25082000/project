---
description: Component patterns - UI, forms, routing, templates
globs:
alwaysApply: false
---

# Component Patterns

**Prerequisites**: read `@.cursor/rules/A-coding_patterns`

## Complete Pattern (Page Component)

```typescript
@Component({
  selector: 'app-user-list',
  template: `
    <div class="user-list-page">
      <!-- Loading/Error states -->
      @if (isLoading()) {
        <v-loading />
      } @else if (error()) {
        <v-error [error]="error()" />
      }
      
      <!-- Search -->
      <input [(ngModel)]="searchTerm" (ngModelChange)="search($event)">
      
      <!-- List with new operators -->
      @for (user of users(); track user.id) {
        @if ('active' in user && user.active) {
          <v-user-card 
            [user]="user" 
            (select)="selectUser($event)"
          />
        }
      }
      
      <!-- Power calculation example -->
      <p>Total users: {{ users().length ** 2 }} squared</p>
    </div>
  `,
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class UserListPage {
  private userService = inject(UserService);
  
  // Direct signal binding
  users = this.userService.users;
  isLoading = this.userService.isLoading;
  error = this.userService.error;
  searchTerm = model('');
  
  search(term: string): void {
    this.userService.search(term);
  }
  
  selectUser(id: string): void {
    this.userService.selectById(id);
  }
}
```

## Component Types

| Type | Responsibilities | Can Inject |
|------|-----------------|------------|
| Page | Orchestrates, binds to services | Services only |
| Reusable | Display, emit events | Nothing |

## Forms {#forms}

**CRITICAL**: All forms MUST use the dynamic form pattern. Manual FormBuilder usage is prohibited.

```typescript
// REQUIRED: Form config in constant file
export const USER_EDIT_FORM_CONFIG = (): iDynamicFormConfig[] => [
  {
    label: 'Name',
    name: 'name',
    type: { field: eDynamicField.INPUT },
    validations: [Validators.required, Validators.minLength(2)]
  },
  {
    label: 'Avatar URL',
    name: 'avatar_url',
    type: { field: eDynamicField.INPUT },
    validations: []
  }
];

// REQUIRED: Usage in component
<v-dynamic-form 
  [config]="formConfig" 
  (formSubmit)="onSubmit($event)"
/>
```

**Form Checklist**:
- [ ] Uses dynamic form config pattern
- [ ] No manual FormBuilder usage
- [ ] No custom form templates
- [ ] All validations defined in config

## Routing {#routing}

```typescript
// Navigate with service
navigateToUser(id: string): void {
  this.router.navigate(['/users', id]);
}

// Smooth scroll
scrollToSection(id: string): void {
  this.viewportScroller.scrollToAnchor(id, { behavior: 'smooth' });
}
```

## Template Syntax {#template}

```html
<!-- Angular 20: New operators -->
{{ base ** exponent }}              <!-- Power -->
{{ 'property' in object }}          <!-- Property check -->

<!-- Control flow -->
@if (condition) { }
@for (item of items(); track item.id) { }
@switch (value()) { @case ('a') { } }
```

## Component Checklist
- [ ] Page components inject services only
- [ ] Reusable components use input/output only
- [ ] Uses OnPush change detection
- [ ] Templates use new control flow
- [ ] Forms use dynamic config pattern
- [ ] Errors handled via @error_handling_patterns#component-errors

## Rule Enforcement

### Pre-Implementation Checklist
- [ ] Read @A-coding_patterns as prerequisite
- [ ] Verify signal-based architecture compliance
- [ ] Confirm dynamic form pattern usage
- [ ] Validate TypeScript strict typing
- [ ] Check OnPush change detection

### Post-Implementation Validation
- [ ] No manual FormBuilder usage
- [ ] No `effect()` in components
- [ ] No `$any()` type assertions
- [ ] All forms use dynamic config
- [ ] Proper separation of concerns maintained