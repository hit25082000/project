---
description: Global architectural, quality, and security standards for the entire codebase
alwaysApply: false
---

# General Coding Patterns

This file is the single source of truth for cross-cutting architectural and quality rules. Other rule documents must reference this guide instead of restating its content.

## Code Organization Principles

### Separation of Concerns
- **Presentation Layer**: Components handle UI and user interactions
- **State Layer**: Services manage application state and business logic  
- **Data Layer**: APIs handle backend communication

### Dependency Flow
```
Components → Services → APIs → Supabase
```

### Signal-Based Architecture
- Use Angular Signals for all state management
- Avoid manual subscription management
- Leverage `computed()` for derived state
- Use `resource()` for async data loading
- **FORBIDDEN**: `effect()` in components for form state management
- **REQUIRED**: Use `computed()` for reactive form updates

### Referencing This Guide
- Component, service, and API pattern files should link back here for shared rules on signals, layering, and security
- Update this document first whenever a global rule changes, then adjust downstream references

## Code Quality Standards

### TypeScript Usage
- Use strict type checking
- Prefer interfaces over types for object shapes
- Use utility types (`Pick`, `Omit`, `Partial`) for type variations
- **FORBIDDEN**: `any` type usage including `$any()` in templates
- **REQUIRED**: Proper type assertions with `as` keyword

### Performance Considerations
- Use `OnPush` change detection strategy
- Implement lazy loading for modules
- Use `trackBy` functions in `@for` loops
- Optimize bundle size with tree shaking

### Security Best Practices
- Validate all user inputs
- Sanitize data before rendering
- Use proper authentication guards
- Implement proper authorization checks

## Rule Enforcement

### Pre-Implementation Checklist
- [ ] Read this guide as prerequisite for all component patterns
- [ ] Verify signal-based architecture compliance
- [ ] Confirm TypeScript strict typing
- [ ] Check separation of concerns
- [ ] Validate performance considerations

### Post-Implementation Validation
- [ ] No `effect()` in components for form state
- [ ] No `$any()` type assertions in templates
- [ ] Proper type assertions with `as` keyword
- [ ] OnPush change detection used
- [ ] Signal-based state management implemented