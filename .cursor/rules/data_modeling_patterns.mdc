---
description: TypeScript interfaces and type patterns
alwaysApply: false
---

# Data Modeling Patterns

## Quick Pattern

```typescript
// 1. Base interface (complete entity)
export interface iEstablishment {
  id: string;
  name: string;
  description: string;
  category: eEstablishmentCategory;
  status: eEstablishmentStatus;
  ownerId: string;
  createdAt: string;
  updatedAt: string;
}

// 2. Derive variations
export type iEstablishmentPreview = Pick<iEstablishment, 'id' | 'name' | 'description'>;
export type iEstablishmentCreate = Omit<iEstablishment, 'id' | 'createdAt' | 'updatedAt'>;
export type iEstablishmentUpdate = Partial<Pick<iEstablishment, 'name' | 'description'>>;

// 3. Enums for finite sets
export enum eEstablishmentCategory {
  RESTAURANT = 'restaurant',
  HOTEL = 'hotel',
  SHOP = 'shop'
}

// 4. Generic wrappers
export interface iApiResponse<T> {
  data: T;
  error?: ApiError;
}

export interface iPaginatedResponse<T> {
  data: T[];
  pagination: { page: number; total: number; }
}
```

## Validation Types {#validation}

```typescript
export interface iValidationResult {
  isValid: boolean;
  errors: string[];
}

// Use in services: @C-service_patterns#validation
```

## Naming Rules
- Interfaces: `i[Feature]` (iUser, iProduct)
- Type variations: `i[Feature][Purpose]` (iUserCreate)
- Enums: `e[Feature][Property]` (eUserRole)
- Files: `[feature].model.ts`