---
description: Core project principles, tech stack, and non-negotiable architectural decisions
globs:
alwaysApply: false
---

# Módulo 1: Visão Geral e Princípios do Projeto

Esta seção define as bases do projeto, seus objetivos, regras inegociáveis e a stack tecnológica.

## Project: [Name]

### Purpose

A single, clear sentence describing what this software does and for whom.

### Core Principles

  * **Architecture**: Signal-Based State Management with a strict separation of concerns (Presentation \> State \> Data).
  * **Code Style**: Functional-first, immutable data patterns. Asynchronous operations use `async/await` (Promises).
  * **Reactivity**: The UI is a direct reflection of the state. No manual DOM manipulation or imperative state synchronization. RxJS is not used for state management.
  * **Backend Communication**: Explicit and isolated within the Data Access (API) Layer.

### Tech Stack

  * **Language**: TypeScript 5.4+
  * **Framework**: Angular 18+ (Zoneless)
  * **Backend/DB**: Supabase
  * **Key Libraries**: None. State management relies on built-in Angular Signals.

### Non-Negotiables

  * **No `NgZone`**: The project must be bootstrapped as zoneless.
  * **No State in Components**: Components reflect state, they do not own business logic state. State is managed in services.
  * **Services Do Not Access `SupabaseClient`**: Services must use the API layer for all data access.
  * **Follow Naming Conventions**: All files, classes, and selectors must follow the established naming conventions.
  * **Use Signal-based Control Flow**: Use `@if`, `@for`, `@switch` in templates. Do not use `*ngIf`, `*ngFor`.

-----