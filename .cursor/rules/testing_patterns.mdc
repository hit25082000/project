---
description: Testing patterns by layer
alwaysApply: false
---

# Testing Patterns

## Quick Reference by Layer

| Layer | Test Focus | Mock Dependencies |
|-------|------------|-------------------|
| API | Supabase queries | SupabaseClient |
| Service | Business logic, signals | API layer |
| Component | UI behavior, inputs/outputs | Services |

## Universal Test Template

```typescript
describe('[Feature][Layer]', () => {
  let target: TargetClass;
  let mockDep: jasmine.SpyObj<Dependency>;

  beforeEach(() => {
    mockDep = jasmine.createSpyObj('Dependency', ['method']);
    TestBed.configureTestingModule({
      providers: [
        TargetClass,
        { provide: Dependency, useValue: mockDep }
      ]
    });
    target = TestBed.inject(TargetClass);
  });

  it('should [expected behavior]', async () => {
    // Arrange
    mockDep.method.and.returnValue(Promise.resolve(data));
    
    // Act
    const result = await target.action();
    
    // Assert
    expect(result).toEqual(expected);
  });
});
```

## Service Testing {#service-tests}

```typescript
it('should handle errors from API', async () => {
  const error = new ApiError('Failed');
  mockApi.getItems.and.returnValue(Promise.reject(error));
  
  await service.loadItems();
  
  expect(service.error()).toEqual(error);
  expect(service.isLoading()).toBeFalse();
});
```

## Component Testing {#component-tests}

```typescript
it('should display loading state', () => {
  mockService.isLoading.and.returnValue(signal(true));
  fixture.detectChanges();
  
  const spinner = fixture.nativeElement.querySelector('v-loading');
  expect(spinner).toBeTruthy();
});
```

## API Testing {#api-tests}

```typescript
it('should transform Supabase errors', async () => {
  mockSupabase.from.and.returnValue({
    select: () => Promise.resolve({ 
      data: null, 
      error: { code: 'PGRST116' } 
    })
  });
  
  const result = await api.getItem('1');
  expect(result).toBeNull();
});
```

## Test Commands

```bash
npm test                    # Run all tests
npm test [file.spec.ts]    # Run specific test
npm test -- --coverage     # With coverage
```

## Coverage Requirements

- Services: 80% (business logic critical)
- APIs: 70% (mostly integration)
- Components: 60% (UI can be visual tested)